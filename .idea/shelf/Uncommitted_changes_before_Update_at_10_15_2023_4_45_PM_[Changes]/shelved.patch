Index: src/main/java/Network.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.text.html.Option;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.function.DoubleUnaryOperator;\r\n\r\npublic class Network<T> {\r\n    private List<Layer> layers = new ArrayList<>();\r\n\r\n    public Network(int[] layerStructure, double learningRate,\r\n                   DoubleUnaryOperator activationFunction,\r\n                   DoubleUnaryOperator derivativeActivationFunction) {\r\n        if (layerStructure.length < 3) {\r\n            throw new IllegalArgumentException(\"Error: Should be at least 3 layers(1 input, 1 hidden, 1 output).\");\r\n        }\r\n        Layer inputLayer = new Layer(Optional.empty(), layerStructure[0],\r\n                learningRate,\r\n                activationFunction,\r\n                derivativeActivationFunction);\r\n        layers.add(inputLayer);\r\n\r\n        for (int i = 1; i < layerStructure.length; i++) {\r\n            Layer nextLayer = new Layer(Optional.of(layers.get(i - 1)),\r\n                    layerStructure[i], learningRate, activationFunction,\r\n                    derivativeActivationFunction);\r\n            layers.add(nextLayer);\r\n        }\r\n    }\r\n\r\n    private double[] outputs(double[] input) {\r\n        double[] result = input;\r\n        for (Layer layer : layers) {\r\n            result = layer.outputs(result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void backPropagate(double[] expected) {\r\n        int lastLater = layers.size() - 1;\r\n        layers.get(lastLater).calculateDeltasForOutputLayer(expected);\r\n        for (int i = lastLater - 1; i >= 0; i++) {\r\n            layers.get(i).calculateDeltasForHiddenLayers(layers.get(i + 1));\r\n        }\r\n    }\r\n\r\n    private void updateWeights() {\r\n        for (Layer layer : layers.subList(1, layers.size())) {\r\n            for (Neuron neuron : layer.neurons) {\r\n                for (int w = 0; w < neuron.weights.length; w++) {\r\n                    neuron.weights[w] = neuron.weights[w] + (neuron.learningRate * layer.previousLayer.get().outputCache[w] * neuron.delta);\r\n                }\r\n            }\r\n        }\r\n    }\r\n//    дописать 7.11---------------\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Network.java b/src/main/java/Network.java
--- a/src/main/java/Network.java	(revision c1c101450167fc973b7aa296925cf9d7f7059f69)
+++ b/src/main/java/Network.java	(date 1697041151865)
@@ -3,6 +3,7 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.function.DoubleUnaryOperator;
+import java.util.function.Function;
 
 public class Network<T> {
     private List<Layer> layers = new ArrayList<>();
@@ -52,6 +53,42 @@
             }
         }
     }
-//    дописать 7.11---------------
+
+    public void train(List<double[]> inputs, List<double[]> expecteds) {
+        for (int i = 0; i < inputs.size(); i++) {
+            double[] xs = inputs.get(i);
+            double[] ys = expecteds.get(i);
+            outputs(xs);
+            backPropagate(ys);
+            updateWeights();
+        }
+    }
+
+    public class Results {
+        public final int correct;
+        public final int trials;
+        public final double percentage;
 
+        public Results(int correct, int trials, double percentage) {
+            this.correct = correct;
+            this.trials = trials;
+            this.percentage = percentage;
+        }
+    }
+
+    public Results validate(List<double[]> inputs, List<T> expecteds,
+                            Function<double[], T> interpret) {
+        int correct = 0;
+        for (int i = 0; i < inputs.size(); i++) {
+            double[] input = inputs.get(i);
+            T expected = expecteds.get(i);
+            T result = interpret.apply(outputs(input));
+            if (result.equals(expected)) {
+                correct++;
+            }
+        }
+        double percentage = (double) correct / (double) inputs.size();
+        return new Results(correct, inputs.size(), percentage);
+    }
 }
+
Index: src/main/java/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public final class Util {\r\n\r\n    public static double dotProduct(double[] xs, double[] ys) {\r\n        double sum = 0.0;\r\n        for (int i = 0; i < xs.length; i++) {\r\n            sum += xs[i] * ys[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static double sigmoid(double x) {\r\n        return 1.0 / (1.0 + Math.exp(-x));\r\n    }\r\n\r\n    public static double derivativeSigmoid(double x) {\r\n        double sig = sigmoid(x);\r\n        return sig * (1.0 - sig);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Util.java b/src/main/java/Util.java
--- a/src/main/java/Util.java	(revision c1c101450167fc973b7aa296925cf9d7f7059f69)
+++ b/src/main/java/Util.java	(date 1697042026936)
@@ -1,3 +1,10 @@
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.*;
+import java.util.stream.Collectors;
+
 public final class Util {
 
     public static double dotProduct(double[] xs, double[] ys) {
@@ -16,4 +23,36 @@
         double sig = sigmoid(x);
         return sig * (1.0 - sig);
     }
+
+    public static void normalizeByFeatureScaling(List<double[]> dataset) {
+        for (int colNum = 0; colNum < dataset.get(0).length; colNum++) {
+            List<Double> column = new ArrayList<>();
+            for (double[] row : dataset) {
+                column.add(row[colNum]);
+            }
+            double maximum = Collections.max(column);
+            double minimum = Collections.min(column);
+            double difference = maximum - minimum;
+            for (double[] row : dataset) {
+                row[colNum] = (row[colNum] - minimum) / difference;
+            }
+        }
+    }
+
+    public static List<String[]> loadCSV(String filename) {
+        try (InputStream inputStream = Util.class.getResourceAsStream(filename)) {
+
+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
+            return bufferedReader.lines().map(line - > line.split(","))
+                    .collect(Collectors.toList());
+
+        } catch (IOException e) {
+            e.printStackTrace();
+            throw new RuntimeException(e.getMessage(), e);
+        }
+    }
+    public static double max(double[] numbers) {
+        return Arrays.stream(numbers).max().orElse(Double.MIN_VALUE);
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"30ffed03-07ef-48f3-b8f5-17d3f58b7fe7\" name=\"Changes\" comment=\"Initial commit\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Layer.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Network.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Neuron.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Util.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Util.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Wboy4Y0Bvqf9wMFvIET8jz8Qrz\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"preferences.lookFeel\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"30ffed03-07ef-48f3-b8f5-17d3f58b7fe7\" name=\"Changes\" comment=\"\" />\r\n      <created>1697010894358</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1697010894358</updated>\r\n      <workItem from=\"1697010895848\" duration=\"1373000\" />\r\n      <workItem from=\"1697013699482\" duration=\"95000\" />\r\n      <workItem from=\"1697013817176\" duration=\"6088000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\r\n      <created>1697014130674</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697014130674</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Initial commit\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c1c101450167fc973b7aa296925cf9d7f7059f69)
+++ b/.idea/workspace.xml	(date 1697370303881)
@@ -5,10 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="30ffed03-07ef-48f3-b8f5-17d3f58b7fe7" name="Changes" comment="Initial commit">
-      <change afterPath="$PROJECT_DIR$/src/main/java/Layer.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Network.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Neuron.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Network.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Network.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Util.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Util.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -35,17 +32,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0",
-    "settings.editor.selected.configurable": "preferences.lookFeel"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -57,6 +54,7 @@
       <workItem from="1697010895848" duration="1373000" />
       <workItem from="1697013699482" duration="95000" />
       <workItem from="1697013817176" duration="6088000" />
+      <workItem from="1697030481569" duration="3834000" />
     </task>
     <task id="LOCAL-00001" summary="Initial commit">
       <created>1697014130674</created>
